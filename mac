#!/bin/sh

# Welcome to the civil laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

# shellcheck disable=SC3043

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if ((0)); then # [ -w "$HOME/.zshrc.local" ]
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

# Determine Homebrew prefix
arch="$(uname -m)"
if [ "$arch" = "arm64" ]; then
  HOMEBREW_PREFIX="/opt/homebrew"
else
  HOMEBREW_PREFIX="/usr/local"
fi

update_shell() {
  local shell_path;
  shell_path="$(which zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(which zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

# checks architecture
if [ "$(uname -m)" = "arm64" ]
  then
  # checks if Rosetta is already installed
  if ! pkgutil --pkg-info=com.apple.pkg.RosettaUpdateAuto > /dev/null 2>&1
  then
    echo "Installing Rosetta"
    # Installs Rosetta2
    softwareupdate --install-rosetta --agree-to-license
  else
    echo "Rosetta is installed"
  fi
fi


gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    append_to_zshrc "eval \"\$($HOMEBREW_PREFIX/bin/brew shellenv)\""

    export PATH="$HOMEBREW_PREFIX/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force
brew bundle --file=- <<EOF
  tap "thoughtbot/formulae"
  tap "homebrew/services"
  tap "heroku/brew"

  # Unix
  brew "universal-ctags"
  brew "git"
  brew "openssl"
  brew "rcm"
  brew "reattach-to-user-namespace"
  brew "tmux"
  brew "vim"
  brew "watchman"
  brew "xsv"
  brew "zsh"
  brew "zsh-completions"
  brew "zplug"

  # Heroku
  brew "heroku/brew/heroku"
  brew "parity"

  # GitHub
  brew "gh"

  # Image manipulation
  brew "imagemagick"

  # Programming language prerequisites and package managers
  brew "autoconf"
  brew "automake"
  brew "coreutils"
  brew "libtool"
  brew "libyaml" # should come after openssl
  brew "unixodbc"
  cask "gpg-suite-no-mail"

  # Databases
  brew "postgresql@16"

  # Start: customization

  brew "awscli"
  brew "bat"
  brew "fd"
  brew "git-delta"
  brew "glow"
  brew "gum"
  brew "jq"
  brew "rg"
  brew "tldr"
  brew "tree"
  brew "wxwidgets"

  # Desktop Apps
  cask "1password"
  cask "1password-cli"
  cask "appzapper"
  cask "balsamiq-wireframes"
  cask "caffeine"
  cask "carbon-copy-cloner"
  cask "dash"
  cask "deckset"
  cask "divvy"
  cask "drawio"
  cask "google-chrome"
  cask "google-drive"
  cask "grammarly"
  cask "grammarly-desktop"
  cask "iterm2"
  cask "keybase"
  cask "keycastr"
  cask "mailplane"
  cask "monodraw"
  cask "netdownloadhelpercoapp"
  cask "ngrok"
  cask "notion"
  cask "raycast"
  cask "slack"
  cask "sourcetree"
  cask "stay"
  cask "typora"
  cask "visual-studio-code"
  cask "zoom"

  # End: customization
EOF

fancy_echo "Update heroku binary ..."
brew unlink heroku
brew link --force heroku

fancy_echo "Configuring asdf version manager ..."
if [ ! -d "$HOME/.asdf" ]; then
  brew install asdf
  append_to_zshrc "source $(brew --prefix asdf)/libexec/asdf.sh" 1
fi

alias install_asdf_plugin=add_or_update_asdf_plugin
add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  else
    asdf plugin-update "$name"
  fi
}

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list-all "$language" | grep -v "[a-z]" | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

# Start: Customizations

if [ ! -d "$HOME/Workspaces" ]; then
  mkdir ~/Workspaces
fi

# `brew search font-`
brew tap homebrew/cask-fonts
brew install font-fira-code
brew install font-fira-mono-for-powerline

# End: Customizations

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1091
  . "$HOME/.laptop.local"
fi
